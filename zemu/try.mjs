import TransportNodeHid from '@ledgerhq/hw-transport-node-hid'
import ledger_logs from '@ledgerhq/logs'
import AvalancheApp from '@zondax/ledger-avalanche-app'
import {DefaultWalletPolicy, WalletPolicy, PsbtV2} from '@zondax/ledger-avalanche-app'

const APP_DERIVATION = "m/44'/9000'/0'/0/0"
export const BTC_PATH = "m/44'/60'/0'"

const BTC_TX = Buffer.from(
  "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",
  "base64"
)

async function get_avax_address(app) {
    const resp = await app.getAddressAndPubKey(APP_DERIVATION, true)

    console.log(resp)
}

async function btc_tx(app) {
    const fpr = await app.getMasterFingerprint();
    console.log("Master key fingerprint:", fpr.toString());

    const xpub = await app.getBtcExtendedPubkey(BTC_PATH);
    console.log("Extended public key:", xpub.toString());

    // slice m/44'/60'/0' to /44'/60'/0'
    const path = BTC_PATH.slice(1)

    const walletPolicy = new DefaultWalletPolicy(
      "wpkh(@0/**)",
      `[${fpr}${path}]${xpub}`
    );

    const psbt = new PsbtV2();
    psbt.deserialize(BTC_TX);
    const result = await app.signPsbt(psbt, walletPolicy, null, () => {});

    console.log(result)
}

async function main() {
    const transport = await TransportNodeHid.default.open();
    ledger_logs.listen((log) => {
        console.log(`${log.type} ${log.message}`)
    });
    const app = new AvalancheApp.default(transport);

    // await get_avax_address(app)
    await btc_tx(app)

}

; (async () => {
  await main()
})()
